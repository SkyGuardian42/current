swagger: "2.0"
info:
  description: "Die API-Dokumentation f√ºr [current](https://current.land)."
  version: "1.0.0"
  title: "current API"
  contact:
    email: "hi@malts.me"
host: "api.current.land"
basePath: "/"
tags:
- name: "posts"
  description: "Post management"
- name: "auth"
  description: "User authentication"
- name: "user"
  description: "User management"
schemes:
- "https"
paths:
  /posts:
    post:
      tags:
      - "posts"
      summary: "Create a new post"
      description: ""
      parameters:
      - in: "body"
        name: "body"
        description: "Post object that needs to be added to the store"
        required: true
        schema:
          type: "object"
          properties:
            title:
              type: "string"
              example: "exampleuser"
            markdownBody:
              type: "string"
              example: "*hello* world!"
            thubmnail:
              type: "string"
              example: "507f191e810c19729de860ea"
      responses:
        "400":
          description: "Invalid input"
    get:
      summary: "Get posts"
      tags:
      - "posts"
      parameters:
      - name: "skip"
        in: "query"
        description: "amount of posts to skip"
        type: "integer"
      - name: "limit"
        in: "query"
        description: "limit the amount of posts to a given value"
        type: "integer"
      - name: "user"
        in: "query"
        description: "only get posts of specified user"
        type: "string"
      responses:
        "200":
          description: "success"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "error"
          schema:
            type: "object"
            properties:
              error:
                type: "object"
                properties:
                  message:
                    type: string
                    example: 'invalid username'
  /posts/{postId}:
    get:
      summary: "Get a single post"
      tags:
      - "posts"
      parameters:
      - name: "postId"
        in: "path"
        description: "Id of the post"
        required: true
        type: "integer"
      responses:
        "200":
          description: "success"
          schema:
            $ref: "#/definitions/Post"
        "404":
          description: "error"
          schema:
            type: "object"
            properties:
              error:
                type: "object"
                properties:
                  message:
                    type: string
                    example: 'Post not found'
              
  /user:
    post:
      tags:
      - "user"
      summary: "Neuen Nutzer erstellen"
      description: "Erstellt einen neuen nutzer und sendet eine Verifizierungsemail an die angegebene Emailadresse"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          type: "object"
          properties:
            username:
              type: "string"
              example: "exampleuser"
            email:
              type: "string"
              example: "mail@example.com"
            password:
              type: "string"
              example: "correcthorsebatterystaple"
      responses:
        default:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"

  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

definitions:
  Post:
    type: "object"
    properties:
      title:
        type: "string"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"

  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"